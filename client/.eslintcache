[{"D:\\dumbways\\WaysGallery\\client\\src\\App.js":"1","D:\\dumbways\\WaysGallery\\client\\src\\index.js":"2","D:\\dumbways\\WaysGallery\\client\\src\\context\\AppContext.js":"3","D:\\dumbways\\WaysGallery\\client\\src\\pages\\landing\\Landing.js":"4","D:\\dumbways\\WaysGallery\\client\\src\\component\\modal\\LoginModal.js":"5","D:\\dumbways\\WaysGallery\\client\\src\\component\\modal\\RegisterModal.js":"6","D:\\dumbways\\WaysGallery\\client\\src\\config\\api.js":"7","D:\\dumbways\\WaysGallery\\client\\src\\pages\\home\\Home.js":"8","D:\\dumbways\\WaysGallery\\client\\src\\route\\PrivateRoute.js":"9","D:\\dumbways\\WaysGallery\\client\\src\\component\\navbar\\NavBar.js":"10","D:\\dumbways\\WaysGallery\\client\\src\\component\\filterbar\\FilterBar.js":"11","D:\\dumbways\\WaysGallery\\client\\src\\component\\card\\Card.js":"12","D:\\dumbways\\WaysGallery\\client\\src\\pages\\detail\\Detail.js":"13","D:\\dumbways\\WaysGallery\\client\\src\\pages\\upload\\Upload.js":"14","D:\\dumbways\\WaysGallery\\client\\src\\pages\\profile\\Profile.js":"15","D:\\dumbways\\WaysGallery\\client\\src\\component\\card\\CardItem.js":"16","D:\\dumbways\\WaysGallery\\client\\src\\pages\\profile\\EditProfile.js":"17","D:\\dumbways\\WaysGallery\\client\\src\\pages\\user\\user.js":"18","D:\\dumbways\\WaysGallery\\client\\src\\pages\\hired\\Hired.js":"19","D:\\dumbways\\WaysGallery\\client\\src\\pages\\user\\User.js":"20","D:\\dumbways\\WaysGallery\\client\\src\\pages\\transactions\\Transactions.js":"21","D:\\dumbways\\WaysGallery\\client\\src\\component\\modal\\TransactionModal.js":"22","D:\\dumbways\\WaysGallery\\client\\src\\pages\\project\\SendProject.js":"23","D:\\dumbways\\WaysGallery\\client\\src\\component\\preview\\Preview.js":"24","D:\\dumbways\\WaysGallery\\client\\src\\pages\\project\\Project.js":"25","D:\\dumbways\\WaysGallery\\client\\src\\component\\modal\\AlertError.js":"26","D:\\dumbways\\WaysGallery\\client\\src\\component\\modal\\ErrorSubmit.js":"27","D:\\dumbways\\WaysGallery\\client\\src\\component\\modal\\SuccessSubmit.js":"28","D:\\dumbways\\WaysGallery\\client\\src\\component\\modal\\ProgressBar.js":"29","D:\\dumbways\\WaysGallery\\client\\src\\component\\dropdown\\Dropdown.js":"30"},{"size":2526,"mtime":1608372054119,"results":"31","hashOfConfig":"32"},{"size":334,"mtime":1607992728537,"results":"33","hashOfConfig":"32"},{"size":2171,"mtime":1608017880871,"results":"34","hashOfConfig":"32"},{"size":2643,"mtime":1608393444888,"results":"35","hashOfConfig":"32"},{"size":3262,"mtime":1608393502931,"results":"36","hashOfConfig":"32"},{"size":4241,"mtime":1608393182426,"results":"37","hashOfConfig":"32"},{"size":363,"mtime":1608018045648,"results":"38","hashOfConfig":"32"},{"size":2240,"mtime":1608562902968,"results":"39","hashOfConfig":"32"},{"size":646,"mtime":1608018794547,"results":"40","hashOfConfig":"32"},{"size":2184,"mtime":1608463094399,"results":"41","hashOfConfig":"32"},{"size":834,"mtime":1608395066939,"results":"42","hashOfConfig":"32"},{"size":301,"mtime":1608215645222,"results":"43","hashOfConfig":"32"},{"size":4014,"mtime":1608405673684,"results":"44","hashOfConfig":"32"},{"size":9238,"mtime":1608458317334,"results":"45","hashOfConfig":"32"},{"size":4489,"mtime":1608558090912,"results":"46","hashOfConfig":"32"},{"size":393,"mtime":1608215619335,"results":"47","hashOfConfig":"32"},{"size":12836,"mtime":1608559579473,"results":"48","hashOfConfig":"32"},{"size":3705,"mtime":1608275455327,"results":"49","hashOfConfig":"32"},{"size":6717,"mtime":1608456864593,"results":"50","hashOfConfig":"32"},{"size":4670,"mtime":1608456214497,"results":"51","hashOfConfig":"32"},{"size":17563,"mtime":1608380981584,"results":"52","hashOfConfig":"32"},{"size":1265,"mtime":1608371532663,"results":"53","hashOfConfig":"32"},{"size":9344,"mtime":1608458121618,"results":"54","hashOfConfig":"32"},{"size":631,"mtime":1608368780458,"results":"55","hashOfConfig":"32"},{"size":5009,"mtime":1608460197593,"results":"56","hashOfConfig":"32"},{"size":212,"mtime":1608392827620,"results":"57","hashOfConfig":"32"},{"size":548,"mtime":1608404336423,"results":"58","hashOfConfig":"32"},{"size":556,"mtime":1608404793946,"results":"59","hashOfConfig":"32"},{"size":383,"mtime":1608444425865,"results":"60","hashOfConfig":"32"},{"size":1565,"mtime":1608463177809,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},"qedfbo",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"67"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"67"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"67"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"67"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"67"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"67"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"67"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"67"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"67"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133"},"D:\\dumbways\\WaysGallery\\client\\src\\App.js",["134"],"import './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\n\n// component\nimport PrivateRoute from './route/PrivateRoute';\n\n// pages\nimport Landing from './pages/landing/Landing';\nimport Home from './pages/home/Home';\nimport Detail from './pages/detail/Detail';\nimport Profile from './pages/profile/Profile';\nimport EditProfile from './pages/profile/EditProfile';\nimport User from './pages/user/User';\nimport Hired from './pages/hired/Hired';\nimport Transactions from './pages/transactions/Transactions';\nimport SendProject from './pages/project/SendProject';\nimport Project from './pages/project/Project';\nimport Upload from './pages/upload/Upload';\n\nimport {API, setAuthToken} from './config/api';\nimport { AppContext } from './context/AppContext';\nimport { useContext, useEffect } from 'react';\n\nconst App = () => {\n  const [state, dispatch] = useContext(AppContext);\n\n  const loadUser = async () => {\n    \n    try {\n\n      const token = localStorage.getItem('token');\n\n      if(!token){\n        return dispatch({\n          type: \"LOGOUT\"\n        });\n      }\n      setAuthToken(token);\n      \n      const response = await API.get('/auth');  \n\n      if(response.data.status !== \"success\"){\n          return dispatch({\n              type: \"AUTH_ERROR\"\n          });\n      }\n\n      dispatch({\n        type: \"LOAD_USER\",\n        payload: response.data.data.user\n      });\n\n    } catch(err){\n        console.log(err);\n        return dispatch({\n          type: \"AUTH_ERROR\",\n      });\n    }\n  }\n\n  useEffect(() => {\n    loadUser();\n  },[state.login]);\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n          <Route exact path=\"/auth\" component={Landing} />\n          <PrivateRoute exact path=\"/\" component={Home} />\n          <PrivateRoute exact path=\"/detail/:postId\" component={Detail} />\n          <PrivateRoute exact path=\"/upload\" component={Upload} />\n          <PrivateRoute exact path=\"/profile\" component={Profile} />\n          <PrivateRoute exact path=\"/edit-profile\" component={EditProfile} />\n          <PrivateRoute exact path=\"/user/:id\" component={User} />\n          <PrivateRoute exact path=\"/hired/:id\" component={Hired} />\n          <PrivateRoute exact path=\"/transactions\" component={Transactions} />\n          <PrivateRoute exact path=\"/send/:transactionId\" component={SendProject} />\n          <PrivateRoute exact path=\"/project/:transactionId\" component={Project} />\n\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n\n","D:\\dumbways\\WaysGallery\\client\\src\\index.js",[],["135","136"],"D:\\dumbways\\WaysGallery\\client\\src\\context\\AppContext.js",[],"D:\\dumbways\\WaysGallery\\client\\src\\pages\\landing\\Landing.js",[],"D:\\dumbways\\WaysGallery\\client\\src\\component\\modal\\LoginModal.js",["137"],"import './modal.css';\r\nimport {useState, useContext} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport {AppContext} from '../../context/AppContext';\r\nimport { API, setAuthToken } from '../../config/api';\r\nimport close from '../../assets/icon/close.png';\r\nimport AlertError from './AlertError';\r\n\r\nconst LoginModal = (props) => {\r\n    const router = useHistory();\r\n    const [state, dispatch] = useContext(AppContext);\r\n    const [error, setError] = useState({\r\n        status: false,\r\n        message: ''\r\n    });\r\n  \r\n    const [formData, setFormData] = useState({\r\n        email: \"\",\r\n        password: \"\"\r\n    });\r\n\r\n    const handleInputChange = (event) => {\r\n        setError({\r\n            status: false\r\n        });\r\n\r\n        setFormData({\r\n            ...formData,\r\n            [event.target.name] : event.target.value\r\n        });\r\n    }\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        try {\r\n\r\n            const body = JSON.stringify(formData);\r\n            const config = {\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            }\r\n            const response = await API.post('/login', body, config);\r\n\r\n            if(response.data.status === \"error\"){\r\n                setError({\r\n                    status: true,\r\n                    message: \"Invalid login\"\r\n                });\r\n                return false;\r\n            }\r\n\r\n            dispatch({\r\n                type: 'LOGIN',\r\n                payload: response.data.data.user\r\n            });\r\n\r\n            setAuthToken(response.data.data.user.token);\r\n            router.push('/');\r\n           \r\n        } catch(err){\r\n            console.log(err);\r\n        }\r\n    }\r\n    return(\r\n        <div className=\"modal-container\" >\r\n            <div className=\"modal-form-container\">\r\n                <div className=\"close-modal\">\r\n                    <button onClick={props.closeModal}>\r\n                        <img src={close} alt=\"close\" />\r\n                    </button>\r\n                </div>\r\n                <h1>Sign In</h1>\r\n                {error.status && (<AlertError message={error.message} />)}\r\n                <form className=\"modal-form\" onSubmit={handleSubmit}>\r\n                    <input \r\n                        type=\"text\" \r\n                        placeholder=\"Email\" \r\n                        name=\"email\" \r\n                        autoComplete=\"off\"\r\n                        value={formData.email}\r\n                        onChange={(event) => handleInputChange(event)}\r\n                    />\r\n                    <input\r\n                        type=\"password\" \r\n                        placeholder=\"Password\"\r\n                        name=\"password\"\r\n                        value={formData.password}\r\n                        autoComplete=\"off\"\r\n                        onChange={handleInputChange}\r\n                    />\r\n                    <button className=\"button-primary\">Sign In</button>\r\n                    <span className=\"modal-form-navigation\">Don't have an account ? Click <strong onClick={props.switchModal}>Here</strong></span>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginModal;","D:\\dumbways\\WaysGallery\\client\\src\\component\\modal\\RegisterModal.js",["138","139","140"],"import './modal.css';\r\nimport {useState, useContext} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport {AppContext} from '../../context/AppContext';\r\nimport { API, setAuthToken } from '../../config/api';\r\nimport close from '../../assets/icon/close.png';\r\nimport AlertError from './AlertError';\r\n\r\nconst RegisterModal = (props) => {\r\n    const router = useHistory();\r\n    const [state, dispatch] = useContext(AppContext);\r\n    const [success, setSuccess] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState({\r\n        status: false,\r\n        message: \"\"\r\n    });\r\n\r\n    const [formData, setFormData] = useState({\r\n        email: \"\",\r\n        password: \"\",\r\n        fullName: \"\"\r\n    });\r\n\r\n    const handleInputChange = (event) => {\r\n        setError({\r\n            status: false\r\n        });\r\n\r\n        setFormData({\r\n            ...formData,\r\n            [event.target.name] : event.target.value\r\n        });\r\n    }\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        try {\r\n            setLoading(true);\r\n            setError({\r\n                ...error,\r\n                status: false\r\n            });\r\n\r\n            setSuccess(false);\r\n\r\n            const body = JSON.stringify(formData);\r\n            const config = {\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            }\r\n            const response = await API.post('/register', body, config);\r\n\r\n            if(response.data.status === \"success\"){\r\n                setSuccess(true);\r\n                setError({\r\n                    ...error,\r\n                    status: false\r\n                });\r\n                setLoading(false);\r\n                dispatch({\r\n                    type: 'LOGIN',\r\n                    payload: response.data.data.user\r\n                });\r\n    \r\n                setAuthToken(response.data.data.user.token);\r\n                router.push('/');\r\n            } else {\r\n                setError({\r\n                    status: true,\r\n                    message: response.data.error.message\r\n                });\r\n                setSuccess(false);\r\n                setLoading(false);\r\n                return;\r\n            }\r\n           \r\n        } catch(err){\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"modal-container\">\r\n            <div className=\"modal-form-container\">\r\n                <div className=\"close-modal\">\r\n                    <button onClick={props.closeModal}>\r\n                        <img src={close} alt=\"close\" />\r\n                    </button>\r\n                </div>\r\n                <h1>Register</h1>\r\n                {error.status && (<AlertError message={error.message} />)}\r\n                <form className=\"modal-form\" onSubmit={handleSubmit}>\r\n                    <input \r\n                        type=\"text\" \r\n                        placeholder=\"Email\" \r\n                        name=\"email\" \r\n                        autoComplete=\"off\"\r\n                        value={formData.email}\r\n                        onChange={(event) => handleInputChange(event)}\r\n                    />\r\n                    <input\r\n                        type=\"password\" \r\n                        placeholder=\"Password\"\r\n                        name=\"password\"\r\n                        autoComplete=\"off\"\r\n                        value={formData.password}\r\n                        onChange={(event) => handleInputChange(event)}\r\n                    />\r\n                    <input\r\n                        type=\"text\" \r\n                        placeholder=\"Ful Name\"\r\n                        name=\"fullName\"\r\n                        autoComplete=\"off\"\r\n                        value={formData.fullName}\r\n                        onChange={(event) => handleInputChange(event)}\r\n                    />\r\n\r\n                    <button className=\"button-primary\">Register</button>\r\n                </form>\r\n                <span className=\"modal-form-navigation\">Already have an account ? Click <strong onClick={props.switchModal}>Here</strong></span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RegisterModal;","D:\\dumbways\\WaysGallery\\client\\src\\config\\api.js",[],"D:\\dumbways\\WaysGallery\\client\\src\\pages\\home\\Home.js",["141"],"D:\\dumbways\\WaysGallery\\client\\src\\route\\PrivateRoute.js",[],"D:\\dumbways\\WaysGallery\\client\\src\\component\\navbar\\NavBar.js",["142","143"],"D:\\dumbways\\WaysGallery\\client\\src\\component\\filterbar\\FilterBar.js",[],"D:\\dumbways\\WaysGallery\\client\\src\\component\\card\\Card.js",[],"D:\\dumbways\\WaysGallery\\client\\src\\pages\\detail\\Detail.js",["144","145"],"import './detail.css';\r\nimport NavBar from '../../component/navbar/NavBar';\r\nimport { useState, useEffect, Fragment } from 'react';\r\nimport {useParams} from 'react-router-dom';\r\nimport { API } from '../../config/api';\r\n\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\nconst Detail = () => {\r\n    const currentUser = JSON.parse(localStorage.getItem('user'));\r\n    const [loading, setLoading] = useState(false);\r\n    const { postId } = useParams();\r\n    const [post, setPost] = useState();\r\n    const [error, setError] = useState(false);\r\n\r\n    const getPost = async () => {\r\n        try {\r\n            setLoading(true);\r\n            const response = await API.get(`/post/${postId}`);\r\n\r\n            if(response.data.status !== \"success\"){\r\n                setError(true);\r\n                setLoading(false);\r\n                return;\r\n            }\r\n\r\n            setPost(response.data.data.post);\r\n            setLoading(false);\r\n            setError(false);\r\n            return;\r\n\r\n        } catch(err){\r\n            console.log(err);\r\n        }\r\n    }\r\n   \r\n   useEffect(() => {\r\n       getPost();\r\n   },[]);\r\n\r\n    \r\n   \r\n    return(\r\n        <Fragment>\r\n            <NavBar />\r\n            <div className=\"main-container\">\r\n                {!post || error? (\r\n                    <h1>Server error</h1>\r\n                ):\r\n                loading ? (\r\n                    <h1>Loading...</h1>\r\n                ):(\r\n                    <div className=\"detail-container\">\r\n                        <div className=\"detail-header\">\r\n                            <div className=\"detail-avatar\">\r\n                                <img src={`http://localhost:5000/avatar/${post.createdBy.avatar}`} alt=\"avatar\" />\r\n                            </div>\r\n                            <div className=\"detail-title\">\r\n                                <span>{post.title}</span>\r\n                                <Link to={`/user/${post.createdBy.id}`} className=\"link\">\r\n                                    <span>{post.createdBy.fullName}</span>\r\n                                </Link>\r\n                            </div>\r\n                            {currentUser.id != post.createdBy.id ? \r\n                                <div className=\"detail-nav\">\r\n                                    <button className=\"button-secondary\">Follow</button>\r\n                                    <Link to={`/hired/${post.createdBy.id}`} className=\"link\">\r\n                                        <button className=\"button-primary\">Hire</button>\r\n                                    </Link>\r\n                                </div>:null\r\n                            }\r\n                        </div>\r\n                        <div className=\"detail-body\">\r\n                            <div className=\"detail-image\">\r\n                                <img src={`http://localhost:5000/photo/${post.photos[0].image}`} alt=\"detail\"/>\r\n                            </div>\r\n                            <div className=\"detail-sub-image\">\r\n                                {post.photos.map(photo => {\r\n                                    \r\n                                    return post.photos.indexOf(photo) !==0 ?\r\n                                        <img\r\n                                            key={photo.id} \r\n                                            src={`http://localhost:5000/photo/${photo.image}`} \r\n                                            alt=\"detail\"/>\r\n                                        :\"\"\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"detail-footer\">\r\n                            \r\n                            👋<strong>Say Hello</strong> <span>{post.createdBy.email}</span>\r\n                            \r\n                            <p>{post.description}</p>\r\n                        </div>\r\n\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default Detail;\r\n\r\n\r\n","D:\\dumbways\\WaysGallery\\client\\src\\pages\\upload\\Upload.js",["146"],"import './upload.css';\r\nimport {Fragment, useEffect} from 'react';\r\nimport {useState} from 'react';\r\nimport { API } from '../../config/api';\r\nimport NavBar from '../../component/navbar/NavBar';\r\nimport {useHistory} from 'react-router-dom';\r\n\r\nimport Dropzone from 'react-dropzone'\r\nimport cloudcomputing from '../../assets/icon/cloudcomputing.svg';\r\nimport plus from '../../assets/icon/plus.svg';\r\nimport Preview from '../../component/preview/Preview';\r\nimport ErrorSubmit from '../../component/modal/ErrorSubmit';\r\nimport SuccessSubmit from '../../component/modal/SuccessSubmit';\r\nimport ProgressBar from '../../component/modal/ProgressBar';\r\n\r\nconst Upload = () => {\r\n    const router = useHistory();\r\n    const [progres, setProgres] = useState(0);\r\n    const [loading, setLoading] = useState(false);\r\n    const [previews, setPreviews] = useState([]);\r\n\r\n    const [error, setError] = useState({\r\n        status: false,\r\n        message: ''\r\n    });\r\n\r\n    const [success, setSuccess] = useState({\r\n        status: false,\r\n        message: ''\r\n    })\r\n  \r\n    const [formData, setFormData] = useState({\r\n        title: \"\",\r\n        description: \"\",\r\n    });\r\n\r\n    const handleOnDrop = (acceptedFiles, rejectedFiles) => {\r\n        if(rejectedFiles.length > 0){\r\n            setError({\r\n                status: true,\r\n                message: 'Only images are allowed'\r\n            });\r\n            return;\r\n        }\r\n        if(acceptedFiles.length > 5){\r\n            setError({\r\n                status: true,\r\n                message: 'Files cannot be more than 5'\r\n            });\r\n\r\n            return;\r\n        }\r\n\r\n        if(previews.length >= 5){\r\n            setError({\r\n                status: true,\r\n                message: 'Files cannot be more than 5'\r\n            });\r\n\r\n            return;\r\n        }\r\n        \r\n        if(acceptedFiles.length > 1){\r\n            if(previews.length === 0){\r\n                setPreviews(\r\n                    ...previews,\r\n                    acceptedFiles\r\n                )\r\n            } else {\r\n                const data = [...previews];\r\n                const indexArr = data.length;\r\n                \r\n                for(let i = 0; i < acceptedFiles.length; i++){\r\n                    data[indexArr + i] = acceptedFiles[i]\r\n                }\r\n                setPreviews(data);\r\n            }\r\n        } else {\r\n            setPreviews(\r\n                [...previews, acceptedFiles[0]]\r\n            );\r\n        }\r\n    }\r\n\r\n    const handleInputChange = (event) => {\r\n        setFormData({\r\n            ...formData,\r\n            [event.target.name] : event.target.value\r\n        });\r\n    }\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        const body = new FormData();\r\n        body.append('title', formData.title );\r\n        body.append('description', formData.description);\r\n       \r\n        if(previews.length === 0){\r\n            setError({\r\n                status: true,\r\n                message: 'Please select a photo at least 1 photo'\r\n            });\r\n            return;\r\n        }\r\n\r\n        previews.forEach(photo => {\r\n            body.append('photo', photo);\r\n        });\r\n\r\n        const config = {\r\n            headers: {\r\n                \"content-type\": \"multipart/form-data\",\r\n            },\r\n            onUploadProgress: (event)=> {\r\n                const {loaded, total} = event;\r\n                let percent = Math.floor( (loaded * 100) / total )\r\n                setProgres(percent);\r\n            }\r\n        };\r\n            \r\n        try {\r\n            setLoading(true);\r\n            const response = await API.post('/post',body, config);\r\n\r\n            if(response.data.status !== \"success\"){\r\n                setSuccess({\r\n                    status: false,\r\n                    message:''\r\n                })\r\n                setError({\r\n                    status: true,\r\n                    message: response.data.error.message\r\n                });\r\n                setLoading(false);\r\n                return;\r\n            }\r\n\r\n            setFormData({\r\n                title: \"\",\r\n                description: \"\"\r\n            });\r\n\r\n            setSuccess({\r\n                status:true,\r\n                message: 'Your post was successfully added'\r\n            });\r\n\r\n            setError({\r\n                status: false,\r\n                message: \"\"\r\n            });\r\n\r\n            setPreviews([]);\r\n            setLoading(false);\r\n            \r\n        } catch(err){\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    const closeModal = () => {\r\n        setError({\r\n            status:false,\r\n            message: ''\r\n        })\r\n\r\n        setSuccess({\r\n            status: false,\r\n            message: ''\r\n        });\r\n    }\r\n\r\n    const goBack = (event) => {\r\n        event.preventDefault();\r\n        router.goBack();\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(progres == 100){\r\n            setProgres(0)\r\n        }\r\n    },[progres])\r\n\r\n    return(\r\n        <Fragment>\r\n            <NavBar />\r\n            {loading && (<ProgressBar message={progres} />)}\r\n            {error.status && <ErrorSubmit message={error.message} closeModal={closeModal} />}\r\n            {success.status && <SuccessSubmit message={success.message} closeModal={closeModal} />}\r\n            <div className=\"main-container\">\r\n                <div className=\"upload-container\">\r\n                    <div className=\"upload-photo\">\r\n                        <div className=\"upload-photo-primary\">\r\n                            <Dropzone onDrop={handleOnDrop} maxSize={3 * 1000 * 1000}>\r\n                                {({getRootProps, getInputProps}) => (\r\n                                    <section>\r\n                                        <div {...getRootProps()}>\r\n                                            <input {...getInputProps()} />\r\n                                            {previews.length > 0 ? <Preview file={previews[0]} primary={true} />:\r\n                                                <div>\r\n                                                    <img src={cloudcomputing} alt=\"cloud\" className=\"photo-primary\" />\r\n                                                    <p className=\"browse\"><span>Browse</span> to choose a Project</p>\r\n                                                </div>\r\n                                            }\r\n                                        </div>\r\n                                    </section>\r\n                                )}\r\n                            </Dropzone>\r\n                        </div>\r\n                        <div className=\"upload-photo-secondary\">\r\n                            <div className=\"photo-item\">\r\n                                {previews[1] ? \r\n                                  <Preview file={previews[1]} />:<img src={plus} alt=\"cloud\" className=\"photo-preview\"/>\r\n                                } \r\n                            </div>\r\n                            <div className=\"photo-item\">\r\n                                {previews[2] ? \r\n                                  <Preview file={previews[2]} />:<img src={plus} alt=\"cloud\" className=\"photo-preview\"/>\r\n                                } \r\n                            </div>\r\n                            <div className=\"photo-item\">\r\n                                {previews[3] ? \r\n                                  <Preview file={previews[3]} />:<img src={plus} alt=\"cloud\" className=\"photo-preview\"/>\r\n                                } \r\n                            </div>\r\n                            <div className=\"photo-item\">\r\n                                {previews[4] ? \r\n                                  <Preview file={previews[4]} />:<img src={plus} alt=\"cloud\" className=\"photo-preview\"/>\r\n                                } \r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"upload-form\">\r\n                        <form onSubmit={(event) => handleSubmit(event)}>\r\n                            <input \r\n                                type=\"text\" \r\n                                placeholder=\"Title\" \r\n                                name=\"title\" \r\n                                autoComplete=\"off\"\r\n                                value={formData.title}\r\n                                onChange={(event) => handleInputChange(event)}\r\n                            />\r\n                            <textarea\r\n                                name=\"description\"\r\n                                placeholder=\"Description\"\r\n                                value={formData.description}\r\n                                onChange={(event)=>handleInputChange(event)}    \r\n                            >\r\n                            </textarea>\r\n                            <div className=\"upload-button\">\r\n                                <button className=\"button-secondary\" onClick={goBack}>Cancel</button>\r\n                                <button className=\"button-primary\">Post</button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Upload;","D:\\dumbways\\WaysGallery\\client\\src\\pages\\profile\\Profile.js",[],"D:\\dumbways\\WaysGallery\\client\\src\\component\\card\\CardItem.js",[],"D:\\dumbways\\WaysGallery\\client\\src\\pages\\profile\\EditProfile.js",["147","148"],"D:\\dumbways\\WaysGallery\\client\\src\\pages\\user\\user.js",["149"],"D:\\dumbways\\WaysGallery\\client\\src\\pages\\hired\\Hired.js",[],"D:\\dumbways\\WaysGallery\\client\\src\\pages\\user\\User.js",["150","151"],"import { Fragment, useState, useEffect } from 'react';\r\nimport './user.css';\r\nimport NavBar from '../../component/navbar/NavBar';\r\nimport { API } from '../../config/api';\r\nimport {useParams, Link, useHistory} from 'react-router-dom';\r\nimport detailtopright from '../../assets/icon/detailtopright.svg';\r\nimport nopost from '../../assets/icon/nopost.png';\r\n\r\nconst User = () => {\r\n    const router = useHistory();\r\n    const currentUser = JSON.parse(localStorage.getItem('user'));\r\n    const {id} = useParams();\r\n    const [latestPostIndex, setLatestPostIndex] = useState(null);\r\n\r\n    if(currentUser.id == id){\r\n        router.push('/profile');\r\n    }\r\n\r\n    const [error, setError] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const [user, setUser] = useState();\r\n\r\n    const getUser = async () => {\r\n        try {\r\n            setLoading(true);\r\n            const response = await API.get(`/user/${id}`);\r\n\r\n            if(response.data.status !== \"success\"){\r\n                setError(true);\r\n                setLoading(false);\r\n                return;\r\n            }\r\n\r\n            setError(false);\r\n            setLoading(false);\r\n            setUser(response.data.data.user);\r\n            setLatestPostIndex(response.data.data.user.posts.length - 1);\r\n            \r\n        } catch(err){\r\n            console.log(err);\r\n            setLoading(false);\r\n        }\r\n    }\r\n    \r\n\r\n    useEffect(() => {\r\n        getUser();\r\n    },[]);\r\n    return(\r\n        <Fragment>\r\n            <NavBar />\r\n            <div className=\"main-container\">\r\n                <img src={detailtopright} alt=\"detail\" className=\"detail-top-right\" />\r\n                {error || !user ? (\r\n                    <h1>Server Error</h1>\r\n                ):loading ? (\r\n                    <h1>Loading...</h1>\r\n                ):(\r\n                    <div className=\"profile-container\">\r\n                        <div className=\"profile-top\">\r\n                            <div className=\"profile-left-user\">\r\n                                <img src={`http://localhost:5000/avatar/${user.avatar}`} alt=\"avatar\" className=\"profile-avatar\" />\r\n                                <span className=\"profile-fullname\">{user.fullName}</span>\r\n                                <h1 className=\"profile-greeting\">{user.greeting}</h1>\r\n                                <Link to=\"/edit-profile\" className=\"link\">\r\n                                    <button className=\"button-secondary\">Follow</button>\r\n                                </Link>\r\n                                <Link to={`/hired/${user.id}`} className=\"link\">\r\n                                    <button className=\"button-primary\">Hire</button>\r\n                                </Link>\r\n                            </div>\r\n                            <div className=\"profile-right-user\">\r\n                                {user.posts.length > 0 && latestPostIndex ? (\r\n                                    <img src={`http://localhost:5000/photo/${user.posts[latestPostIndex].photos[0].image}`} alt=\"last post\" />\r\n                                ): (\r\n                                    <div className=\"empty-post\">\r\n                                        <img src={nopost} alt=\"empty\" />\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"profile-bottom\">\r\n                            <h4>{user.fullName} Works</h4>\r\n                            <div className=\"profile-post-container\">\r\n                                {user.arts.length > 0 ? (\r\n                                    user.arts.map(art => {\r\n                                        return <div className=\"profile-post\" key={art.id}>\r\n                                                    <img\r\n                                                        src={`http://localhost:5000/art/${art.image}`} \r\n                                                        alt=\"last post\" \r\n                                                    />\r\n                                                </div>\r\n                                    })\r\n                                ):(\r\n                                    <div className=\"empty-arts\">\r\n                                        <p>{user.fullName} has no art</p>\r\n                                    </div>\r\n                                )  \r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </Fragment>\r\n        \r\n    );\r\n}\r\n\r\nexport default User;","D:\\dumbways\\WaysGallery\\client\\src\\pages\\transactions\\Transactions.js",["152","153","154"],"import './transaction.css';\r\nimport {Fragment, useEffect, useState} from 'react';\r\nimport NavBar from '../../component/navbar/NavBar';\r\nimport { API } from '../../config/api';\r\n\r\nimport cancel from '../../assets/icon/cancel.svg';\r\nimport complete from '../../assets/icon/complete.svg';\r\nimport waiting from '../../assets/icon/waiting.svg';\r\nimport TransactionModal from '../../component/modal/TransactionModal';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst Transactions = () => {\r\n    const [transactions, setTransactions] = useState([]);\r\n    const [statusParam, setStatusParam] = useState('my-order');\r\n    const [error, setError]  = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const [modalDetailTransaction, setModalDetailTransaction] = useState({\r\n        status : false,\r\n        transaction: '',\r\n        param:''\r\n    });\r\n\r\n    const getTransactions = async () => {\r\n        try{\r\n            setLoading(true);\r\n            const response = await API.get(`transactions?status=${statusParam}`);\r\n\r\n            if(response.data.status !== \"success\"){\r\n                setError(true);\r\n                setLoading(false);\r\n                return;\r\n            }\r\n\r\n            setTransactions(response.data.data.transactions)\r\n            setError(false);\r\n        } catch(err){\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        setStatusParam(event.target.value);\r\n    }\r\n\r\n    const responseOrder = async (transactionId,status) => {\r\n        try {\r\n            const body = {\r\n                status\r\n            }\r\n            \r\n            const response = await API.put(`/transaction/${transactionId}`, body);\r\n\r\n            if(response.data.status === \"success\"){\r\n                getTransactions();\r\n            }\r\n\r\n            setModalDetailTransaction({\r\n                status: false,\r\n                transaction: \"\",\r\n                param:\"\"\r\n            });\r\n\r\n        } catch(err){\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const showModalDetailTransaction = (transaction, param) => {\r\n        setModalDetailTransaction({\r\n            status: true,\r\n            transaction,\r\n            param\r\n        });\r\n    }\r\n\r\n    const closeModalDetailTransaction = () => {\r\n        setModalDetailTransaction({\r\n            status: false,\r\n            transaction: \"\"\r\n        });\r\n    }\r\n    \r\n\r\n    useEffect(() =>{\r\n        getTransactions();\r\n    },[statusParam]);\r\n\r\n    return (\r\n        <Fragment>\r\n            <NavBar />\r\n            {modalDetailTransaction.status && (\r\n                    <TransactionModal\r\n                        param={modalDetailTransaction.param} \r\n                        transaction={modalDetailTransaction.transaction}\r\n                        closeModalDetailTransaction={() => {closeModalDetailTransaction()}}\r\n                        responseOrder = {() => responseOrder(modalDetailTransaction.transaction.id, 'Success')} \r\n                    />\r\n            )}\r\n            <div className=\"main-container\">\r\n                <div className=\"transaction-container\">\r\n                    <select className=\"transactions-filter\" onChange={handleChange}>\r\n                        <option value=\"my-order\">My Order</option>\r\n                        <option value=\"my-offer\">My Offer</option>\r\n                    </select>\r\n                    <table className=\"table-transactions\">\r\n                        <thead>\r\n                            {\r\n                                statusParam === \"my-order\" ?\r\n                                <tr>\r\n                                    <th>No</th>\r\n                                    <th>Vendor</th>\r\n                                    <th>Order</th>\r\n                                    <th>Start Project</th>\r\n                                    <th>End Project</th>\r\n                                    <th>Status</th>\r\n                                    <th className=\"transactions-action-head\">Action</th>\r\n                                </tr>\r\n                                :\r\n                                statusParam === \"my-offer\" ?\r\n                                <tr>\r\n                                    <th>No</th>\r\n                                    <th>Client</th>\r\n                                    <th>Order</th>\r\n                                    <th>Start Project</th>\r\n                                    <th>End Project</th>\r\n                                    <th>Status</th>\r\n                                    <th className=\"transactions-action-head\">Action</th>\r\n                                </tr>\r\n                                : null\r\n                            }\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                statusParam === \"my-order\"? \r\n                                    transactions.length > 0 ? transactions.map((transaction, index)=> {\r\n                                        return <tr key={transaction.id}>\r\n                                                    <td>{index+1}</td>\r\n                                                    <td>{transaction.orderTo[0].fullName}</td>\r\n                                                    <td \r\n                                                        className=\"transactions-order\"\r\n                                                        onClick={() => showModalDetailTransaction(transaction, \"my-order\")}\r\n                                                        >\r\n                                                        {transaction.description}\r\n                                                    </td>\r\n                                                    <td>{new Date(transaction.startDate).toLocaleDateString()}</td>\r\n                                                    <td>{new Date(transaction.endDate).toLocaleDateString()}</td>\r\n                                                    {\r\n                                                        transaction.status === \"Waiting Accept\" ? (\r\n                                                            <td className=\"status-waiting\">{transaction.status}</td>\r\n                                                        ):\r\n                                                        transaction.status === \"Project is Complete\" ? (\r\n                                                            <td className=\"status-project-complete\">{transaction.status}</td>\r\n                                                        ):\r\n                                                        transaction.status === \"Waiting Approved Project\" ? (\r\n                                                            <td className=\"status-waiting-approved\">{transaction.status}</td>\r\n                                                        ):\r\n                                                        transaction.status === \"Rejected\" ? (\r\n                                                            <td className=\"status-reject\">{transaction.status}</td>\r\n                                                        ):\r\n                                                        transaction.status === \"Success\" ? (\r\n                                                            <td className=\"status-complete\">{transaction.status}</td>\r\n                                                        ):\r\n                                                        transaction.status === \"Cancel\"? (\r\n                                                            <td className=\"status-cancel\">{transaction.status}</td>\r\n                                                        ):null\r\n                                                    }\r\n                                                    <td className=\"transactions-action\">\r\n                                                        {\r\n                                                        transaction.status === \"Waiting Accept\" ? (\r\n                                                                <img src={waiting} alt=\"wait\" />\r\n                                                            ):\r\n                                                        transaction.status === \"Waiting Approved Project\" ? (\r\n                                                            <Link to={`/project/${transaction.id}`} className=\"link\">\r\n                                                                <button className=\"button-approve\">View Project</button>\r\n                                                            </Link>\r\n                                                        ):\r\n                                                        transaction.status === \"Project is Complete\" ? (\r\n                                                            <Link to={`/project/${transaction.id}`} className=\"link\">\r\n                                                                <button className=\"button-approve\">View Project</button>\r\n                                                            </Link>\r\n                                                        ):\r\n                                                        transaction.status === \"Rejected\" ? (\r\n                                                            <Link to={`/project/${transaction.id}`} className=\"link\">\r\n                                                                <button className=\"button-approve\">View Project</button>\r\n                                                            </Link>\r\n                                                        ):\r\n                                                        transaction.status === \"Success\" ? (\r\n                                                                <img src={complete} alt=\"complete\" />\r\n                                                            ):\r\n                                                        transaction.status === \"Cancel\"? (\r\n                                                                <img src={cancel} alt=\"cancel\" />\r\n                                                            ):null\r\n                                                        }\r\n                                                    </td>\r\n                                                </tr>\r\n                                    }) : <tr className=\"transactions-empty\">\r\n                                            <td colSpan={7}>U dont have order right now</td>\r\n                                        </tr>\r\n\r\n                                : statusParam === \"my-offer\"?\r\n                                    transactions.length > 0 ? transactions.map((transaction, index)=> {\r\n                                        return  <tr key={transaction.id}>\r\n                                                    <td>{index+1}</td>\r\n                                                    <td>{transaction.orderBy[0].fullName}</td>\r\n                                                    <td \r\n                                                        className=\"transactions-order\"\r\n                                                        onClick={() => showModalDetailTransaction(transaction, \"my-offer\")}\r\n                                                        >\r\n                                                        {transaction.description}\r\n                                                    </td>\r\n                                                    <td>{new Date(transaction.startDate).toLocaleDateString()}</td>\r\n                                                    <td>{new Date(transaction.endDate).toLocaleDateString()}</td>\r\n                                                    {\r\n                                                        transaction.status === \"Waiting Accept\" ? (\r\n                                                            <td className=\"status-waiting\">{transaction.status}</td>\r\n                                                        ):\r\n                                                        transaction.status === \"Waiting Approved Project\" ? (\r\n                                                            <td className=\"status-waiting-approved\">{transaction.status}</td>\r\n                                                        ):\r\n                                                        transaction.status === \"Project is Complete\" ? (\r\n                                                            <td className=\"status-project-complete\">{transaction.status}</td>\r\n                                                        ):\r\n                                                        transaction.status === \"Rejected\" ? (\r\n                                                            <td className=\"status-reject\">{transaction.status}</td>\r\n                                                        ):\r\n                                                        transaction.status === \"Success\" ? (\r\n                                                            <td className=\"status-complete\">{transaction.status}</td>\r\n                                                        ):\r\n                                                        transaction.status === \"Cancel\"? (\r\n                                                            <td className=\"status-cancel\">{transaction.status}</td>\r\n                                                        ):null\r\n                                                    }\r\n                                                    <td className=\"transactions-action\">\r\n                                                        {\r\n                                                        transaction.status === \"Waiting Accept\" ? (\r\n                                                                <div className=\"transactions-button\">\r\n                                                                    <button \r\n                                                                        className=\"button-cancel\"\r\n                                                                        onClick={() => responseOrder(transaction.id, 'Cancel')}\r\n                                                                        >\r\n                                                                        Cancel\r\n                                                                    </button>\r\n                                                                    <button \r\n                                                                        className=\"button-approve\"\r\n                                                                        onClick={() => responseOrder(transaction.id,'Success')}\r\n                                                                        >\r\n                                                                        Approve\r\n                                                                    </button>\r\n                                                                </div>\r\n                                                            ):\r\n                                                        transaction.status === \"Success\" ? (\r\n                                                                <Link to={`/send/${transaction.id}`} className=\"link\">\r\n                                                                    <button className=\"button-approve\">Send Project</button>\r\n                                                                </Link>\r\n                                                            ):\r\n                                                        transaction.status === \"Waiting Approved Project\" ? (\r\n                                                                <Link to={`/send/${transaction.id}`} className=\"link\">\r\n                                                                    <button className=\"button-approve\">Send Project</button>\r\n                                                                </Link>\r\n                                                            ):\r\n                                                        transaction.status === \"Project is Complete\" ? (\r\n                                                            <img src={complete} alt=\"complete\" />\r\n                                                        ):\r\n                                                        transaction.status === \"Rejected\" ? (\r\n                                                            <Link to={`/send/${transaction.id}`} className=\"link\">\r\n                                                                <button className=\"button-approve\">Send Project</button>\r\n                                                            </Link>\r\n                                                        ):\r\n                                                        transaction.status === \"Cancel\"? (\r\n                                                                <img src={cancel} alt=\"cancel\" />\r\n                                                            ):null\r\n                                                        }\r\n                                                    </td>\r\n                                                </tr>\r\n                \r\n                                    }) : <tr className=\"transactions-empty\">\r\n                                            <td colSpan={7}>U dont have offer right now</td>\r\n                                         </tr>\r\n\r\n                                    : null\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Transactions;\r\n\r\n","D:\\dumbways\\WaysGallery\\client\\src\\component\\modal\\TransactionModal.js",[],"D:\\dumbways\\WaysGallery\\client\\src\\pages\\project\\SendProject.js",["155"],"import './project.css';\r\nimport NavBar from '../../component/navbar/NavBar';\r\nimport { Fragment, useState, useEffect } from 'react';\r\nimport Dropzone from 'react-dropzone'\r\nimport cloudcomputing from '../../assets/icon/cloudcomputing.svg';\r\nimport plus from '../../assets/icon/plus.svg';\r\nimport Preview from '../../component/preview/Preview';\r\nimport {API} from '../../config/api';\r\nimport {useParams} from 'react-router-dom';\r\n\r\nimport ErrorSubmit from '../../component/modal/ErrorSubmit';\r\nimport SuccessSubmit from '../../component/modal/SuccessSubmit';\r\nimport ProgressBar from '../../component/modal/ProgressBar';\r\n\r\nconst SendProject = () => {\r\n    const {transactionId} = useParams();\r\n    const [progres, setProgres] = useState(0);\r\n    const [loading, setLoading] = useState(false);\r\n    const [previews, setPreviews] = useState([]);\r\n\r\n    const [error, setError] = useState({\r\n        status: false,\r\n        message: ''\r\n    });\r\n\r\n    const [success, setSuccess] = useState({\r\n        status: false,\r\n        message: ''\r\n    })\r\n\r\n    const [formData, setFormdata] = useState({\r\n        description: ''\r\n    });\r\n\r\n    const handleOnDrop = (acceptedFiles, rejectedFiles) => {\r\n\r\n        if(rejectedFiles.length > 0){\r\n            setError({\r\n                status: true,\r\n                message: 'Only images are allowed'\r\n            });\r\n            return;\r\n        }\r\n        if(acceptedFiles.length > 5){\r\n            setError({\r\n                status: true,\r\n                message: 'Files cannot be more than 5'\r\n            });\r\n\r\n            return;\r\n        }\r\n\r\n        if(previews.length >= 5){\r\n            setError({\r\n                status: true,\r\n                message: 'Files cannot be more than 5'\r\n            });\r\n\r\n            return;\r\n        }\r\n        \r\n        if(acceptedFiles.length > 1){\r\n            if(previews.length === 0){\r\n                setPreviews(\r\n                    ...previews,\r\n                    acceptedFiles\r\n                )\r\n            } else {\r\n                const data = [...previews];\r\n                const indexArr = data.length;\r\n                \r\n                for(let i = 0; i < acceptedFiles.length; i++){\r\n                    data[indexArr + i] = acceptedFiles[i]\r\n                }\r\n                setPreviews(data);\r\n            }\r\n        } else {\r\n            setPreviews(\r\n                [...previews, acceptedFiles[0]]\r\n            );\r\n        }\r\n    }\r\n\r\n    const handleInputChange = (event) => {\r\n        setFormdata({\r\n            ...formData,\r\n            [event.target.name]:event.target.value\r\n        });\r\n    }\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        const body = new FormData();\r\n        body.append('transactionId', parseInt(transactionId));\r\n        body.append('description', formData.description);\r\n\r\n        if(previews.length === 0){\r\n            setError({\r\n                status: true,\r\n                message: 'Please select a photo at least 1 photo'\r\n            });\r\n            return;\r\n        }\r\n\r\n        previews.forEach(photo => {\r\n            body.append('project', photo);\r\n        });\r\n\r\n        const config = {\r\n            headers: {\r\n                \"content-type\": \"multipart/form-data\",\r\n            },\r\n            onUploadProgress: (event)=> {\r\n                const {loaded, total} = event;\r\n                let percent = Math.floor( (loaded * 100) / total )\r\n                setProgres(percent);\r\n            }\r\n        };\r\n\r\n        try{\r\n            setLoading(true);\r\n            const response = await API.post('/project',body, config);\r\n\r\n            if(response.data.status !== \"success\"){\r\n                setError({\r\n                    status: true,\r\n                    message: response.data.error.message\r\n                });\r\n                setSuccess({\r\n                    status: false,\r\n                    message: \"\"\r\n                });\r\n\r\n                setLoading(false);\r\n                return;\r\n            }\r\n\r\n            const newStatusTransaction = {\r\n                status: 'Waiting Approved Project'\r\n            }\r\n\r\n            const updateStatusTransaction = await API.put(`/transaction/${transactionId}`, newStatusTransaction);\r\n\r\n            if(updateStatusTransaction.data.status !== \"success\"){\r\n                setError({\r\n                    status: true,\r\n                    message: updateStatusTransaction.data.error.message\r\n                });\r\n                setSuccess({\r\n                    status: false,\r\n                    message: \"\"\r\n                });\r\n                setLoading(false);\r\n                return;\r\n            }\r\n\r\n            setSuccess({\r\n                status: true,\r\n                message: 'Your project has been sent successfully'\r\n            });\r\n            setError({\r\n                status: false,\r\n                message: \"\"\r\n            });\r\n            setFormdata({\r\n                description: ''\r\n            });\r\n            setPreviews([]);\r\n            setLoading(false);\r\n\r\n        }catch(err){\r\n            console.log(err);\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    const closeModal = () => {\r\n        setError({\r\n            status:false,\r\n            message: ''\r\n        })\r\n\r\n        setSuccess({\r\n            status: false,\r\n            message: ''\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(progres == 100){\r\n            setProgres(0)\r\n        }\r\n    },[progres])\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <NavBar />\r\n            {loading && (<ProgressBar message={progres} />)}\r\n            {error.status && <ErrorSubmit message={error.message} closeModal={closeModal} />}\r\n            {success.status && <SuccessSubmit message={success.message} closeModal={closeModal} />}\r\n            <div className=\"main-container\">\r\n                <div className=\"upload-project-container\">\r\n                    <div className=\"upload-project-photo\">\r\n                        <div className=\"upload-project-photo-primary\">\r\n                            <Dropzone onDrop={handleOnDrop} maxSize={3 * 1000 * 1000}>\r\n                                {({getRootProps, getInputProps}) => (\r\n                                    <section>\r\n                                        <div {...getRootProps()}>\r\n                                            <input {...getInputProps()} />\r\n                                            {previews.length > 0 ? <Preview file={previews[0]} primary={true} />:\r\n                                                <div>\r\n                                                    <img src={cloudcomputing} alt=\"cloud\" className=\"photo-primary\" />\r\n                                                    <p className=\"browse\"><span>Browse</span> to choose a Project</p>\r\n                                                </div>\r\n                                            }\r\n                                        </div>\r\n                                    </section>\r\n                                )}\r\n                            </Dropzone>\r\n                        </div>\r\n                        <div className=\"upload-project-photo-secondary\">\r\n                            <div className=\"project-photo-item\">\r\n                                {previews[1] ? \r\n                                  <Preview file={previews[1]} />:<img src={plus} alt=\"cloud\" className=\"project-photo-preview\"/>\r\n                                } \r\n                            </div>\r\n                            <div className=\"project-photo-item\">\r\n                                {previews[2] ? \r\n                                  <Preview file={previews[2]} />:<img src={plus} alt=\"cloud\" className=\"project-photo-preview\"/>\r\n                                } \r\n                            </div>\r\n                            <div className=\"project-photo-item\">\r\n                                {previews[3] ? \r\n                                  <Preview file={previews[3]} />:<img src={plus} alt=\"cloud\" className=\"project-photo-preview\"/>\r\n                                } \r\n                            </div>\r\n                            <div className=\"project-photo-item\">\r\n                                {previews[4] ? \r\n                                  <Preview file={previews[4]} />:<img src={plus} alt=\"cloud\" className=\"project-photo-preview\"/>\r\n                                } \r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"upload-project-form\">\r\n                        <form onSubmit={handleSubmit}>\r\n                            <textarea\r\n                                name=\"description\"\r\n                                placeholder=\"Description\"\r\n                                value={formData.description}\r\n                                onChange={handleInputChange}   \r\n                            >\r\n                            </textarea>\r\n                            <div className=\"upload-project-button\">\r\n                                <button className=\"button-primary\">Send Project</button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default SendProject;","D:\\dumbways\\WaysGallery\\client\\src\\component\\preview\\Preview.js",["156"],"import { useEffect, useState } from \"react\";\r\nimport './preview.css';\r\n\r\nconst Preview = (props) => {\r\n    const [file, setFile] = useState()\r\n    const getPreview = () => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(props.file);\r\n        reader.onloadend = () =>{\r\n            setFile(reader.result)\r\n        }\r\n    }\r\n\r\n    useEffect(()=> {\r\n        getPreview()\r\n    },[]);\r\n\r\n    return props.primary ? \r\n        <img src={file} alt=\"hhhh\" className=\"project-photo-preview-primary\" />:\r\n        <img src={file} alt=\"hhhh\" className=\"project-photo-preview-secondary\" />\r\n}\r\n\r\nexport default Preview;","D:\\dumbways\\WaysGallery\\client\\src\\pages\\project\\Project.js",["157"],"import './project.css';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport {Fragment, useEffect, useState} from 'react';\r\nimport NavBar from '../../component/navbar/NavBar';\r\nimport { API } from '../../config/api';\r\nimport SuccessSubmit from '../../component/modal/SuccessSubmit';\r\nimport ErrorSubmit from '../../component/modal/ErrorSubmit';\r\n\r\nconst Project = () => {\r\n    const router = useHistory();\r\n    const [loading, setLoading] = useState(false);\r\n    const { transactionId } = useParams();\r\n    const [project, setProject] = useState();\r\n    const [error, setError] = useState(false);\r\n\r\n    const [reject, setReject] = useState({\r\n        status: false,\r\n        message: \"\"\r\n    });\r\n\r\n    const [approve, setApprove] = useState({\r\n        status: false,\r\n        message: \"\"\r\n    });\r\n\r\n    const getProject = async () => {\r\n        try {\r\n            setLoading(true);\r\n            const response = await API.get(`/project/${transactionId}`);\r\n\r\n            if(response.data.status !== \"success\"){\r\n                setLoading(false);\r\n                setError(true);\r\n                return;\r\n            }\r\n\r\n            const lastIndex = response.data.data.project.length - 1;\r\n\r\n            setProject(response.data.data.project[lastIndex])\r\n            setError(false);\r\n            setLoading(false);\r\n\r\n        } catch(err){\r\n            console.log(err);\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    const responProject = async (status) => {\r\n        try {\r\n            const body = {\r\n                status\r\n            }\r\n            const response = await API.put(`/transaction/${transactionId}`, body);\r\n\r\n            if(response.data.status !== \"success\"){\r\n                setError(true);\r\n                return;\r\n            }\r\n\r\n            if(status ===\"Rejected\"){\r\n                setReject({\r\n                    status: true,\r\n                    message: \"You rejected this project\"\r\n                });\r\n\r\n                setApprove({\r\n                    status: false,\r\n                    message:\"\"\r\n                });\r\n\r\n                return;\r\n            }\r\n\r\n            if(status === \"Project is Complete\"){\r\n                setApprove({\r\n                    status: true,\r\n                    message: \"You approved this project\"\r\n                });\r\n\r\n                setReject({\r\n                    status: false,\r\n                    message: \"\"\r\n                });\r\n\r\n                return;\r\n            }\r\n           \r\n\r\n        } catch(err){\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getProject();\r\n    },[]);\r\n\r\n    const closeModal = () => {\r\n        setApprove({\r\n            status: false,\r\n            message: \"\"\r\n        });\r\n\r\n        setReject({\r\n            status: false,\r\n            message: \"\"\r\n        });\r\n\r\n        router.goBack();\r\n    }\r\n\r\n  \r\n    return (\r\n        <Fragment>\r\n            <NavBar />\r\n            {reject.status && (<ErrorSubmit message={reject.message} closeModal={closeModal} />)}\r\n            {approve.status && (<SuccessSubmit message={approve.message} closeModal={closeModal} />)}\r\n            {error || !project ? (\r\n                <h1>Server Error...</h1>\r\n            ):loading ? (\r\n                <h1>Loading....</h1>\r\n            ):\r\n            <div className=\"main-container\">\r\n                <div className=\"view-project-container\">\r\n                    <div className=\"left-project-item\">\r\n                        <div className=\"project-image-primary\">\r\n                            <img src={`http://localhost:5000/project/${project.photos[0].image}`} alt='primary' />\r\n                        </div>\r\n\r\n                        <div className=\"project-image-secondary\">\r\n                            {\r\n                                project.photos.filter(photo => {\r\n                                    return project.photos.indexOf(photo) !== 0\r\n                                }).map(photo => {\r\n                                    return <div className=\"image-secondary-item\" key={photo.id}>\r\n                                        <img src={`http://localhost:5000/project/${photo.image}`} alt='primary' />\r\n                                    </div>\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"right-project-item\">\r\n                        <p className=\"view-project-description\">{project.description}</p>\r\n                        <div className=\"view-project-button\">\r\n                            <button className=\"view-button-cancel\" onClick={() => responProject('Rejected')}>Reject</button>\r\n                            <button className=\"view-button-approve\" onClick={() => responProject('Project is Complete')}>Approve</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>}\r\n        </Fragment>\r\n    )\r\n\r\n}\r\n\r\nexport default Project;","D:\\dumbways\\WaysGallery\\client\\src\\component\\modal\\AlertError.js",[],"D:\\dumbways\\WaysGallery\\client\\src\\component\\modal\\ErrorSubmit.js",[],"D:\\dumbways\\WaysGallery\\client\\src\\component\\modal\\SuccessSubmit.js",[],"D:\\dumbways\\WaysGallery\\client\\src\\component\\modal\\ProgressBar.js",[],"D:\\dumbways\\WaysGallery\\client\\src\\component\\dropdown\\Dropdown.js",["158"],"import {Link} from 'react-router-dom';\r\nimport {useContext} from 'react';\r\nimport {AppContext} from '../../context/AppContext';\r\n\r\nimport './dropdown.css';\r\nimport user from '../../assets/icon/user.svg';\r\nimport logout from '../../assets/icon/logout.svg';\r\nimport order from '../../assets/icon/order.svg';\r\n\r\nconst Dropdown = () => {\r\n    const [state, dispatch] = useContext(AppContext);\r\n\r\n    const handleClick = () => {\r\n        dispatch({\r\n            type:\"LOGOUT\"\r\n        })\r\n    }\r\n\r\n    return(\r\n        <div className=\"dropdown-wrapper\">\r\n            <div className=\"polygon\"></div>\r\n            <ul className=\"dropdown-list\">\r\n                <li className=\"dropdown-item\">\r\n                    <Link to=\"/profile\" className=\"dropdown-link link\">\r\n                        <img src={user} alt=\"user icon\" />\r\n                        <span>Profile</span>\r\n                    </Link>\r\n                </li>\r\n                <li className=\"dropdown-item\">\r\n                    <Link to=\"/transactions\" className=\"dropdown-link link\">\r\n                        <img src={order} alt=\"user icon\" />\r\n                        <span>Order</span>\r\n                    </Link>\r\n                </li>\r\n                <li className=\"dropdown-item last-item\">\r\n                    <div className=\"dropdown-link\" onClick={handleClick}>\r\n                        <img src={logout} alt=\"logout icon\" />\r\n                        <span>Logout</span>\r\n                    </div>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dropdown;",{"ruleId":"159","severity":1,"message":"160","line":67,"column":5,"nodeType":"161","endLine":67,"endColumn":18,"suggestions":"162"},{"ruleId":"163","replacedBy":"164"},{"ruleId":"165","replacedBy":"166"},{"ruleId":"167","severity":1,"message":"168","line":11,"column":12,"nodeType":"169","messageId":"170","endLine":11,"endColumn":17},{"ruleId":"167","severity":1,"message":"168","line":11,"column":12,"nodeType":"169","messageId":"170","endLine":11,"endColumn":17},{"ruleId":"167","severity":1,"message":"171","line":12,"column":12,"nodeType":"169","messageId":"170","endLine":12,"endColumn":19},{"ruleId":"167","severity":1,"message":"172","line":13,"column":12,"nodeType":"169","messageId":"170","endLine":13,"endColumn":19},{"ruleId":"167","severity":1,"message":"173","line":10,"column":12,"nodeType":"169","messageId":"170","endLine":10,"endColumn":17},{"ruleId":"167","severity":1,"message":"174","line":10,"column":11,"nodeType":"169","messageId":"170","endLine":10,"endColumn":19},{"ruleId":"159","severity":1,"message":"175","line":28,"column":7,"nodeType":"161","endLine":28,"endColumn":20,"suggestions":"176"},{"ruleId":"159","severity":1,"message":"177","line":40,"column":6,"nodeType":"161","endLine":40,"endColumn":8,"suggestions":"178"},{"ruleId":"179","severity":1,"message":"180","line":65,"column":45,"nodeType":"181","messageId":"182","endLine":65,"endColumn":47},{"ruleId":"179","severity":1,"message":"183","line":179,"column":20,"nodeType":"181","messageId":"182","endLine":179,"endColumn":22},{"ruleId":"167","severity":1,"message":"168","line":20,"column":12,"nodeType":"169","messageId":"170","endLine":20,"endColumn":17},{"ruleId":"179","severity":1,"message":"183","line":299,"column":20,"nodeType":"181","messageId":"182","endLine":299,"endColumn":22},{"ruleId":"159","severity":1,"message":"175","line":39,"column":7,"nodeType":"161","endLine":39,"endColumn":9,"suggestions":"184"},{"ruleId":"179","severity":1,"message":"183","line":15,"column":23,"nodeType":"181","messageId":"182","endLine":15,"endColumn":25},{"ruleId":"159","severity":1,"message":"175","line":48,"column":7,"nodeType":"161","endLine":48,"endColumn":9,"suggestions":"185"},{"ruleId":"167","severity":1,"message":"186","line":15,"column":12,"nodeType":"169","messageId":"170","endLine":15,"endColumn":17},{"ruleId":"167","severity":1,"message":"172","line":16,"column":12,"nodeType":"169","messageId":"170","endLine":16,"endColumn":19},{"ruleId":"159","severity":1,"message":"187","line":86,"column":7,"nodeType":"161","endLine":86,"endColumn":20,"suggestions":"188"},{"ruleId":"179","severity":1,"message":"183","line":191,"column":20,"nodeType":"181","messageId":"182","endLine":191,"endColumn":22},{"ruleId":"159","severity":1,"message":"189","line":16,"column":7,"nodeType":"161","endLine":16,"endColumn":9,"suggestions":"190"},{"ruleId":"159","severity":1,"message":"191","line":97,"column":7,"nodeType":"161","endLine":97,"endColumn":9,"suggestions":"192"},{"ruleId":"167","severity":1,"message":"168","line":11,"column":12,"nodeType":"169","messageId":"170","endLine":11,"endColumn":17},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadUser'. Either include it or remove the dependency array.","ArrayExpression",["193"],"no-native-reassign",["194"],"no-negated-in-lhs",["195"],"no-unused-vars","'state' is assigned a value but never used.","Identifier","unusedVar","'success' is assigned a value but never used.","'loading' is assigned a value but never used.","'posts' is assigned a value but never used.","'pathName' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getUser'. Either include it or remove the dependency array.",["196"],"React Hook useEffect has a missing dependency: 'getPost'. Either include it or remove the dependency array.",["197"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.",["198"],["199"],"'error' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getTransactions'. Either include it or remove the dependency array.",["200"],"React Hook useEffect has a missing dependency: 'getPreview'. Either include it or remove the dependency array.",["201"],"React Hook useEffect has a missing dependency: 'getProject'. Either include it or remove the dependency array.",["202"],{"desc":"203","fix":"204"},"no-global-assign","no-unsafe-negation",{"desc":"205","fix":"206"},{"desc":"207","fix":"208"},{"desc":"209","fix":"210"},{"desc":"209","fix":"211"},{"desc":"212","fix":"213"},{"desc":"214","fix":"215"},{"desc":"216","fix":"217"},"Update the dependencies array to be: [loadUser, state.login]",{"range":"218","text":"219"},"Update the dependencies array to be: [currentUser, getUser]",{"range":"220","text":"221"},"Update the dependencies array to be: [getPost]",{"range":"222","text":"223"},"Update the dependencies array to be: [getUser]",{"range":"224","text":"225"},{"range":"226","text":"225"},"Update the dependencies array to be: [getTransactions, statusParam]",{"range":"227","text":"228"},"Update the dependencies array to be: [getPreview]",{"range":"229","text":"230"},"Update the dependencies array to be: [getProject]",{"range":"231","text":"232"},[1574,1587],"[loadUser, state.login]",[811,824],"[currentUser, getUser]",[1102,1104],"[getPost]",[1100,1102],"[getUser]",[1463,1465],[2461,2474],"[getTransactions, statusParam]",[401,403],"[getPreview]",[2634,2636],"[getProject]"]